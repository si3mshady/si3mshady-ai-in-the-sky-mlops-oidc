name: UrbanSound â€¢ SageMaker OIDC MLOps

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_retrain:
        description: "Force SageMaker training"
        default: "false"
      endpoint_env:
        description: "Endpoint environment"
        default: "staging"
        type: choice
        options: [ staging, production ]
      train_instance_type:
        description: "SageMaker Training InstanceType"
        default: "ml.m5.large"
      serve_instance_type:
        description: "SageMaker Inference InstanceType"
        default: "ml.g4dn.xlarge"

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: "564230509626"
  S3_BUCKET: urbansound-mlops-56423506
  TRAIN_ECR_REPOSITORY: urbansound-train
  INFER_ECR_REPOSITORY: urbansound-infer
  SAGEMAKER_EXECUTION_ROLE_ARN: arn:aws:iam::564230509626:role/urbansound-sagemaker-execution
  OIDC_ROLE_ARN: arn:aws:iam::564230509626:role/urbansound-github-actions-v2
  ENDPOINT_NAME_BASE: urbansound-audio
  PYTHON_VERSION: "3.11"

concurrency:
  group: mlops-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push-images:
    name: Build & Push (ECR)
    runs-on: ubuntu-latest
    outputs:
      train-image-uri: ${{ steps.out-train.outputs.TRAIN_IMAGE_URI }}
      infer-image-uri: ${{ steps.out-infer.outputs.INFER_IMAGE_URI }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-skip-session-tagging: true
      - uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push TRAIN image
        uses: docker/build-push-action@v6
        with:
          context: docker/training
          file: docker/training/Dockerfile
          push: true
          provenance: false
          no-cache: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.TRAIN_ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.TRAIN_ECR_REPOSITORY }}:latest
          build-args: |
            GIT_SHA=${{ github.sha }}

      - name: Build & Push INFER image
        uses: docker/build-push-action@v6
        with:
          context: docker/inference
          file: docker/inference/Dockerfile
          push: true
          provenance: false
          no-cache: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.INFER_ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.INFER_ECR_REPOSITORY }}:latest
          build-args: |
            GIT_SHA=${{ github.sha }}

      - name: Output Train URI
        id: out-train
        run: echo "TRAIN_IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.TRAIN_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Output Infer URI
        id: out-infer
        run: echo "INFER_IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.INFER_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  sagemaker-train-and-deploy:
    name: Train & Deploy (SageMaker)
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install boto3 botocore pyyaml

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-skip-session-tagging: true

      - name: Show image URIs
        run: |
          echo "TRAIN_IMAGE_URI=${{ needs.build-and-push-images.outputs.train-image-uri }}"
          echo "INFER_IMAGE_URI=${{ needs.build-and-push-images.outputs.infer-image-uri }}"

      - name: Train + (Re)Deploy Endpoint
        env:
          TRAIN_IMAGE_URI: ${{ needs.build-and-push-images.outputs.train-image-uri }}
          INFER_IMAGE_URI: ${{ needs.build-and-push-images.outputs.infer-image-uri }}
        run: |
          python scripts/sm_train_and_deploy.py \
            --region "${{ env.AWS_REGION }}" \
            --bucket "${{ env.S3_BUCKET }}" \
            --execution-role "${{ env.SAGEMAKER_EXECUTION_ROLE_ARN }}" \
            --train-image-uri "$TRAIN_IMAGE_URI" \
            --infer-image-uri "$INFER_IMAGE_URI" \
            --endpoint-base "${{ env.ENDPOINT_NAME_BASE }}" \
            --force-retrain "${{ github.event.inputs.force_retrain || 'false' }}" \
            --train-instance "${{ github.event.inputs.train_instance_type || 'ml.m5.large' }}" \
            --serve-instance "${{ github.event.inputs.serve_instance_type || 'ml.g4dn.xlarge' }}" \
            --env "${{ github.event.inputs.endpoint_env || 'staging' }}" \
            --git-sha "${{ github.sha }}"

      - name: Verify endpoint uses inference image
        env:
          EP_ENV: ${{ github.event.inputs.endpoint_env || 'staging' }}
        run: |
          EP="${{ env.ENDPOINT_NAME_BASE }}-${EP_ENV}"
          IMG=$(aws sagemaker describe-endpoint --region "${{ env.AWS_REGION }}" --endpoint-name "$EP" --query EndpointConfigName --output text \
            | xargs -I{} aws sagemaker describe-endpoint-config --region "${{ env.AWS_REGION }}" --endpoint-config-name {} --query 'ProductionVariants[0].ModelName' --output text \
            | xargs -I{} aws sagemaker describe-model --region "${{ env.AWS_REGION }}" --model-name {} --query 'PrimaryContainer.Image' --output text)
          echo "LIVE_IMAGE=$IMG"
          case "$IMG" in
            *"/${{ env.INFER_ECR_REPOSITORY }}:"*) echo "OK: inference image attached.";;
            *) echo "ERROR: Endpoint not using inference image: $IMG" >&2; exit 1;;
          esac

