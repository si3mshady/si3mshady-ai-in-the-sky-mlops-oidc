name: UrbanSound SageMaker OIDC MLOps

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_retrain:
        description: "Force SageMaker training"
        default: "false"
      endpoint_env:
        description: "Endpoint environment"
        default: "staging"
        type: choice
        options: [staging, production]
      train_instance_type:
        description: "SageMaker Training InstanceType"
        default: "ml.m5.large"
      serve_instance_type:
        description: "SageMaker Inference InstanceType"
        default: "ml.g4dn.xlarge"

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: "564230509626"
  S3_BUCKET: urbansound-mlops-56423506
  TRAIN_ECR_REPOSITORY: urbansound-train
  INFER_ECR_REPOSITORY: urbansound-infer
  SAGEMAKER_EXECUTION_ROLE_ARN: arn:aws:iam::564230509626:role/urbansound-sagemaker-execution
  OIDC_ROLE_ARN: arn:aws:iam::564230509626:role/urbansound-github-actions-v2
  ENDPOINT_NAME_BASE: urbansound-audio
  PYTHON_VERSION: "3.11"

concurrency:
  group: mlops-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push-images:
    name: Build & Push (ECR)
    runs-on: ubuntu-latest
    outputs:
      train-image-tag: ${{ steps.out-train.outputs.TRAIN_IMAGE_TAG }}
      infer-image-tag: ${{ steps.out-infer.outputs.INFER_IMAGE_TAG }}
      train-image-digest: ${{ steps.digest-train.outputs.TRAIN_IMAGE_DIGEST }}
      infer-image-digest: ${{ steps.digest-infer.outputs.INFER_IMAGE_DIGEST }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-skip-session-tagging: true

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push TRAIN image
        id: build-train
        uses: docker/build-push-action@v6
        with:
          context: docker/training
          file: docker/training/Dockerfile
          push: true
          provenance: false
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.TRAIN_ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.TRAIN_ECR_REPOSITORY }}:latest
          build-args: |
            GIT_SHA=${{ github.sha }}

      - name: Build & Push INFER image
        id: build-infer
        uses: docker/build-push-action@v6
        with:
          context: docker/inference
          file: docker/inference/Dockerfile
          push: true
          provenance: false
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.INFER_ECR_REPOSITORY }}:${{ github.sha }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.INFER_ECR_REPOSITORY }}:latest
          build-args: |
            GIT_SHA=${{ github.sha }}

      - name: Output Train tag
        id: out-train
        shell: bash
        run: |
          echo "TRAIN_IMAGE_TAG=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.TRAIN_ECR_REPOSITORY }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Output Infer tag
        id: out-infer
        shell: bash
        run: |
          echo "INFER_IMAGE_TAG=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.INFER_ECR_REPOSITORY }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Resolve TRAIN image digest
        id: digest-train
        shell: bash
        run: |
          DIGEST=$(aws ecr describe-images \
            --repository-name "${{ env.TRAIN_ECR_REPOSITORY }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --query 'imageDetails[0].imageDigest' --output text)
          FULL="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.TRAIN_ECR_REPOSITORY }}@${DIGEST}"
          echo "TRAIN_IMAGE_DIGEST=${FULL}" >> "$GITHUB_OUTPUT"

      - name: Resolve INFER image digest
        id: digest-infer
        shell: bash
        run: |
          DIGEST=$(aws ecr describe-images \
            --repository-name "${{ env.INFER_ECR_REPOSITORY }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --query 'imageDetails[0].imageDigest' --output text)
          FULL="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.INFER_ECR_REPOSITORY }}@${DIGEST}"
          echo "INFER_IMAGE_DIGEST=${FULL}" >> "$GITHUB_OUTPUT"

      - name: Guardrail: training and inference are different images
        shell: bash
        run: |
          if [ "${{ steps.digest-train.outputs.TRAIN_IMAGE_DIGEST }}" = "${{ steps.digest-infer.outputs.INFER_IMAGE_DIGEST }}" ]; then
            echo "Train and Infer images share the same digest. Aborting."
            exit 1
          fi

      - name: Smoke test inference image locally
        shell: bash
        run: |
          docker run -d --rm -p 8080:8080 --name urban-infer "${{ steps.out-infer.outputs.INFER_IMAGE_TAG }}" || exit 1
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:8080/ping >/dev/null 2>&1; then
              echo "Ping OK"; break
            fi
            sleep 2
          done
          curl -fsS http://localhost:8080/ping || (docker logs urban-infer; exit 1)
          docker rm -f urban-infer || true

  sagemaker-train-and-deploy:
    name: Train & Deploy (SageMaker)
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        shell: bash
        run: pip install boto3 botocore

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-skip-session-tagging: true

      - name: Train + Deploy
        shell: bash
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          S3_BUCKET: ${{ env.S3_BUCKET }}
          SAGEMAKER_EXECUTION_ROLE_ARN: ${{ env.SAGEMAKER_EXECUTION_ROLE_ARN }}
          ENDPOINT_NAME_BASE: ${{ env.ENDPOINT_NAME_BASE }}
          ENDPOINT_ENV: ${{ github.event.inputs.endpoint_env || 'staging' }}
          INSTANCE_TYPE: ${{ github.event.inputs.train_instance_type || 'ml.m5.large' }}
          SERVE_INSTANCE_TYPE: ${{ github.event.inputs.serve_instance_type || 'ml.g4dn.xlarge' }}
          GIT_SHA: ${{ github.sha }}
          TRAIN_IMAGE_DIGEST: ${{ needs.build-and-push-images.outputs.train-image-digest }}
          INFER_IMAGE_DIGEST: ${{ needs.build-and-push-images.outputs.infer-image-digest }}
        run: |
          python scripts/sm_train_and_deploy.py \
            --region "$AWS_REGION" \
            --bucket "$S3_BUCKET" \
            --execution-role "$SAGEMAKER_EXECUTION_ROLE_ARN" \
            --train-image-uri "$TRAIN_IMAGE_DIGEST" \
            --infer-image-uri "$INFER_IMAGE_DIGEST" \
            --endpoint-base "$ENDPOINT_NAME_BASE" \
            --force-retrain "${{ github.event.inputs.force_retrain || 'false' }}" \
            --train-instance "$INSTANCE_TYPE" \
            --serve-instance "$SERVE_INSTANCE_TYPE" \
            --env "$ENDPOINT_ENV" \
            --git-sha "$GIT_SHA"

